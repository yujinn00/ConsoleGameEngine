#include "PreCompiledHeader.h"

#include "Engine.h"
#include <Windows.h>
#include <iostream>

#include "Level/Level.h"
#include "Actor/Actor.h"

#include <time.h>

#include "Render/ScreenBuffer.h"

// 콘솔 창 메시지 콜백 함수.
BOOL WINAPI MessageProcessor(DWORD message)
{
	switch (message)
	{
	case CTRL_CLOSE_EVENT:
		Engine::Get().QuitGame();
		return true;

	default:
		return false;
	}
}

// 스태틱 변수 초기화
Engine* Engine::instance = nullptr;

Engine::Engine()
	: quit(false), mainLevel(nullptr), screenSize(80, 20)
{
	// 랜덤 시드 설정
	srand((unsigned int)time(nullptr));

	// 싱글톤 객체 설정
	instance = this;

	// 기본 타겟 프레임 속도 설정
	SetTargetFrameRate(60.0f);

	// 화면 버퍼 초기화
	// 버퍼 크기 할당
	imageBuffer = new CHAR_INFO[(screenSize.x + 1) * screenSize.y + 1];

	// 버퍼 초기화.
	ClearImageBuffer();

	// 두 개의 버퍼 생성 (버퍼를 번갈아 사용하기 위해-더블 버퍼링)
	COORD size = { (short)screenSize.x, (short)screenSize.y };
	renderTargets[0] = new ScreenBuffer(GetStdHandle(STD_OUTPUT_HANDLE), size);
	renderTargets[1] = new ScreenBuffer(size);

	// 스왑 버퍼
	Present();

	// 콘솔 창 이벤트 콜백 함수 등록
	SetConsoleCtrlHandler(MessageProcessor, true);
}

Engine::~Engine()
{
	// 메인 레벨 메모리 해제
	if (mainLevel != nullptr)
	{
		delete mainLevel;
	}

	// 클리어 버퍼 삭제
	delete[] imageBuffer;

	// 화면 버퍼 삭제
	delete renderTargets[0];
	delete renderTargets[1];
}

void Engine::Run()
{
	// CPU 시계 사용
	LARGE_INTEGER frequency;
	QueryPerformanceFrequency(&frequency); // 고해상도 타이머 주파수

	// 시작 시간 및 이전 시간을 위한 변수
	LARGE_INTEGER time;
	QueryPerformanceCounter(&time); // 현재 타이머 값
	int64_t currentTime = time.QuadPart;
	int64_t previousTime = currentTime;

	// Game-Loop
	while (true)
	{
		// 종료 조건
		if (quit)
		{
			break;
		}

		// 현재 프레임 시간 저장
		QueryPerformanceCounter(&time);
		currentTime = time.QuadPart;

		// 프레임 시간 계산
		float deltaTime = static_cast<float>(currentTime - previousTime) / static_cast<float>(frequency.QuadPart);

		// 프레임 확인`
		if (deltaTime >= targetOneFrameTime)
		{
			// 입력 처리 (현재 키의 눌림 상태 확인)
			ProcessInput();

			// 업데이트 가능한 상태에서만 프레임 업데이트 처리
			if (shouldUpdate)
			{
				Update(deltaTime);	// 프레임 업데이트
				Draw();				// 게임 오브젝트 그리기
			}

			// 키 상태 저장
			SavePreviousKeyStates();

			// 이전 프레임 시간 저장
			previousTime = currentTime;

			// 액터 정리 (삭제 요청된 액터들 정리)
			if (mainLevel)
			{
				mainLevel->ProcessAddedAndDestroyedActor();
			}

			// 프레임 활성화
			shouldUpdate = true;
		}
	}
}

void Engine::LoadLevel(Level* newLevel)
{
	// 기존 레벨이 있다면 삭제 후 교체

	// 메인 레벨 설정
	mainLevel = newLevel;
}

Level* Engine::GetCurrentLevel() const
{
	return mainLevel;
}

void Engine::AddActor(Actor* newActor)
{
	// 예외 처리
	if (mainLevel == nullptr)
	{
		return;
	}

	// 레벨에 액터 추가
	shouldUpdate = false;
	mainLevel->AddActor(newActor);
}

void Engine::DestroyActor(Actor* targetActor)
{
	// 예외 처리
	if (mainLevel == nullptr)
	{
		return;
	}

	// 레벨에 액터 제거
	shouldUpdate = false;
	targetActor->Destroy();
}

void Engine::SetCursorType(CursorType cursorType)
{
	GetRenderer()->SetCursorType(cursorType);
}

void Engine::Draw(const Vector2& position, const char* image, Color color)
{
	for (int ix = 0; ix < (int)strlen(image); ++ix)
	{
		int index = (position.y * (screenSize.x)) + position.x + ix;
		imageBuffer[index].Char.AsciiChar = image[ix];
		imageBuffer[index].Attributes = (unsigned long)color;
	}
}

void Engine::SetTargetFrameRate(float targetFrameRate)
{
	this->targetFrameRate = targetFrameRate;
	targetOneFrameTime = 1.0f / targetFrameRate;
}

bool Engine::GetKey(int key)
{
	return keyState[key].isKeyDown;
}

bool Engine::GetKeyDown(int key)
{
	return keyState[key].isKeyDown && !keyState[key].wasKeyDown;
}

bool Engine::GetKeyUp(int key)
{
	return !keyState[key].isKeyDown && keyState[key].wasKeyDown;
}

void Engine::QuitGame()
{
	Engine::Get().
	quit = true;
}

Engine& Engine::Get()
{
	// 싱글톤 객체 반환
	return *instance;
}

void Engine::ProcessInput()
{
	for (int i = 0; i < 255; ++i)
	{
		keyState[i].isKeyDown = (GetAsyncKeyState(i) & 0x8000) ? true : false;
	}
}

void Engine::Update(float deltaTime)
{
	// 레벨 업데이트
	if (mainLevel != nullptr)
	{
		mainLevel->Update(deltaTime);
	}
}

void Engine::Clear()
{
	ClearImageBuffer();
	GetRenderer()->Clear();
}

void Engine::Draw()
{
	// 화면 지우기
	Clear();;

	// 레벨 그리기
	if (mainLevel != nullptr)
	{
		mainLevel->Draw();
	}

	// 백 버퍼에 데이터 쓰기
	GetRenderer()->Draw(imageBuffer);

	// 프론트 <-> 백 버퍼 교환
	Present();
}

void Engine::Present()
{
	// 스왑 버퍼
	SetConsoleActiveScreenBuffer(GetRenderer()->buffer);
	currentRenderTargetIndex = 1 - currentRenderTargetIndex;
}

void Engine::SavePreviousKeyStates()
{
	for (int i = 0; i < 255; ++i)
	{
		keyState[i].wasKeyDown = keyState[i].isKeyDown;
	}
}

void Engine::ClearImageBuffer()
{
	// 버퍼 덮어쓰기
	for (int y = 0; y < screenSize.y; ++y)
	{
		// 버퍼 덮어쓰기
		for (int x = 0; x < screenSize.x + 1; ++x)
		{
			auto& buffer = imageBuffer[(y * (screenSize.x + 1)) + x];
			buffer.Char.AsciiChar = ' ';
			buffer.Attributes = 0;
		}

		// 각 줄 끝에 개행 문자 추가
		auto& buffer = imageBuffer[(y * (screenSize.x + 1)) + screenSize.x];
		buffer.Char.AsciiChar = '\n';
		buffer.Attributes = 0;
	}

	// 마지막에 널 문자 추가
	auto& buffer = imageBuffer[(screenSize.x + 1) * screenSize.y];
	buffer.Char.AsciiChar = '\0';
	buffer.Attributes = 0;
}
